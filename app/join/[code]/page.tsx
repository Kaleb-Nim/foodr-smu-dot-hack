"use client";

import React, { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";

export default function JoinPage() {
    const params = useParams();
    const groupCode = params.code as string;
    const router = useRouter();
    const [userName, setUserName] = useState("");
    const [userId, setUserId] = useState<string | null>(null);
    const [message, setMessage] = useState("Verifying group code...");

    useEffect(() => {
        let currentUserId = localStorage.getItem('userId');
        if (currentUserId) {
            setUserId(currentUserId);
        } else {
            // If userId is not in localStorage, it means the user is new or localStorage was cleared.
            // In this scenario, the userId will be generated by the API when creating/joining a group.
            // We will store it in localStorage once received from the API.
            setUserId(null); // Explicitly set to null until received from API
        }
    }, []); // Run only once on component mount

    const handleJoinGroup = async () => {
        if (!groupCode) {
            setMessage("No group code provided in URL.");
            return;
        }


        setMessage("Attempting to join group...");
        try {
            const response = await fetch("/api/groups/join", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ code: groupCode, userName, userId }),
            });
            const data = await response.json();
            if (response.ok) {
                setMessage(`Successfully joined group: ${groupCode}`);
                localStorage.setItem('userId', data.userId); // Store the userId returned from the API
                localStorage.setItem('userName', userName); // Store the userName
                router.push(`${data.redirectUrl}`); // Redirect to holding room with userName
            } else {
                setMessage(`Error joining group: ${data.message}`);
            }
        } catch (error) {
            console.error("Failed to join group:", error);
            setMessage("Failed to connect to server to join group.");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md text-center">
                <h2 className="text-3xl font-extrabold text-gray-900 mb-4">Join Group</h2>
                <p className="text-lg text-gray-700 mb-6">Group Code: <span className="font-bold text-blue-600">{groupCode || "N/A"}</span></p>

                <div className="mb-6">
                    <input
                        type="text"
                        placeholder="Enter your name"
                        className="p-3 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                        value={userName}
                        onChange={(e) => setUserName(e.target.value)}
                    />
                </div>

                <button
                    onClick={handleJoinGroup}
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105"
                >
                    Join Group
                </button>

                <p className="mt-6 text-md text-gray-600">{message}</p>
            </div>
        </div>
    );
}